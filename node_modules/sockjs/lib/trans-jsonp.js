(function() {
  var JsonpReceiver, transport;
  var __hasProp = Object.prototype.hasOwnProperty, __extends = function(child, parent) {
    for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; }
    function ctor() { this.constructor = child; }
    ctor.prototype = parent.prototype;
    child.prototype = new ctor;
    child.__super__ = parent.prototype;
    return child;
  };
  transport = require('./transport');
  JsonpReceiver = (function() {
    __extends(JsonpReceiver, transport.ResponseReceiver);
    JsonpReceiver.prototype.protocol = "jsonp";
    function JsonpReceiver(res, callback) {
      this.callback = callback;
      JsonpReceiver.__super__.constructor.call(this, res);
    }
    JsonpReceiver.prototype.doSendFrame = function(payload) {
      var r;
      if (this.session) {
        this.session.unregister();
      }
      r = JsonpReceiver.__super__.doSendFrame.call(this, this.callback + "(" + JSON.stringify(payload) + ");\r\n");
      this.didClose();
      return r;
    };
    return JsonpReceiver;
  })();
  exports.app = {
    jsonp: function(req, res, _, next_filter) {
      var callback, session;
      if (!('c' in req.query || 'callback' in req.query)) {
        throw {
          status: 500,
          message: '"callback" parameter required'
        };
      }
      callback = 'c' in req.query ? req.query['c'] : req.query['callback'];
      res.setHeader('Content-Type', 'application/javascript; charset=UTF-8');
      res.writeHead(200);
      session = transport.Session.bySessionIdOrNew(req.session, req.sockjs_server);
      session.register(new JsonpReceiver(res, callback));
      return true;
    },
    jsonp_send: function(req, res, query) {
      var d, jsonp, message, _i, _len;
      if (!query) {
        throw {
          status: 500,
          message: 'payload expected'
        };
      }
      if (typeof query === 'string') {
        d = JSON.parse(query);
      } else {
        d = query.d;
      }
      if (typeof d === 'string') {
        d = JSON.parse(d);
      }
      if (!d || d.__proto__.constructor !== Array) {
        throw {
          status: 500,
          message: 'payload expected'
        };
      }
      jsonp = transport.Session.bySessionId(req.session);
      if (jsonp === null) {
        throw {
          status: 404
        };
      }
      for (_i = 0, _len = d.length; _i < _len; _i++) {
        message = d[_i];
        jsonp.didMessage(message);
      }
      res.setHeader('Content-Length', '2');
      res.writeHead(200);
      res.end('ok');
      return true;
    }
  };
}).call(this);
