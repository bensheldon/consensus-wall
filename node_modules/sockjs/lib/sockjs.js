(function() {
  var Server, app, chunking_test, events, iframe, trans_eventsource, trans_htmlfile, trans_jsonp, trans_websocket, trans_xhr, utils, webjs;
  var __hasProp = Object.prototype.hasOwnProperty, __extends = function(child, parent) {
    for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; }
    function ctor() { this.constructor = child; }
    ctor.prototype = parent.prototype;
    child.prototype = new ctor;
    child.__super__ = parent.prototype;
    return child;
  }, __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };
  events = require('events');
  webjs = require('./webjs');
  utils = require('./utils');
  trans_websocket = require('./trans-websocket');
  trans_jsonp = require('./trans-jsonp');
  trans_xhr = require('./trans-xhr');
  iframe = require('./iframe');
  trans_eventsource = require('./trans-eventsource');
  trans_htmlfile = require('./trans-htmlfile');
  chunking_test = require('./chunking-test');
  app = {
    welcome_screen: function(req, res) {
      res.writeHead(200);
      res.end("Welcome to SockJS!");
      return true;
    },
    disabled_transport: function(req, res) {
      res.writeHead(404);
      res.end("Transport disabled.");
      return true;
    }
  };
  utils.objectExtend(app, webjs.generic_app);
  utils.objectExtend(app, iframe.app);
  utils.objectExtend(app, chunking_test.app);
  utils.objectExtend(app, trans_websocket.app);
  utils.objectExtend(app, trans_jsonp.app);
  utils.objectExtend(app, trans_xhr.app);
  utils.objectExtend(app, trans_eventsource.app);
  utils.objectExtend(app, trans_htmlfile.app);
  Server = (function() {
    __extends(Server, events.EventEmitter);
    function Server(user_options) {
      this.options = {
        prefix: '',
        origins: ['*:*'],
        disabled_transports: []
      };
      if (this.options.sockjs_url) {
        throw new Error("options.sockjs_url is required!");
      }
      if (user_options) {
        utils.objectExtend(this.options, user_options);
      }
    }
    Server.prototype.installHandlers = function(http_server, user_options) {
      var dispatcher, handler, install_handler, maybe_add_transport, options, opts_filters, p, t, webjs_handler;
      options = {};
      utils.objectExtend(options, this.options);
      if (user_options) {
        utils.objectExtend(options, user_options);
      }
      p = __bind(function(s) {
        return new RegExp('^' + options.prefix + s + '[/]?$');
      }, this);
      t = __bind(function(s) {
        return [p('/([^/.]+)/([^/.]+)' + s), 'server', 'session'];
      }, this);
      opts_filters = ['h_sid', 'xhr_cors', 'cache_for', 'xhr_options', 'expose'];
      dispatcher = [['GET', p(''), ['welcome_screen']], ['GET', p('/iframe[0-9-.a-z_]*.html'), ['iframe', 'cache_for', 'expose']], ['OPTIONS', p('/chunking_test'), opts_filters], ['POST', p('/chunking_test'), ['h_sid', 'xhr_cors', 'expect_xhr', 'chunking_test']], ['GET', t('/jsonp'), ['h_sid', 'h_no_cache', 'jsonp']], ['POST', t('/jsonp_send'), ['h_sid', 'expect_form', 'jsonp_send']], ['POST', t('/xhr'), ['h_sid', 'xhr_cors', 'xhr_poll']], ['OPTIONS', t('/xhr'), opts_filters], ['POST', t('/xhr_send'), ['h_sid', 'xhr_cors', 'expect_xhr', 'xhr_send']], ['OPTIONS', t('/xhr_send'), opts_filters], ['POST', t('/xhr_streaming'), ['h_sid', 'xhr_cors', 'xhr_streaming']], ['OPTIONS', t('/xhr_streaming'), opts_filters], ['GET', t('/eventsource'), ['h_sid', 'h_no_cache', 'eventsource']], ['GET', t('/htmlfile'), ['h_sid', 'h_no_cache', 'htmlfile']]];
      maybe_add_transport = function(name, urls) {
        var filters, method, url;
        if (options.disabled_transports.indexOf(name) !== -1) {
          urls = (function() {
            var _i, _len, _ref, _results;
            _results = [];
            for (_i = 0, _len = urls.length; _i < _len; _i++) {
              url = urls[_i];
              _ref = url, method = _ref[0], url = _ref[1], filters = _ref[2];
              _results.push([method, url, ['cache_for', 'disabled_transport']]);
            }
            return _results;
          })();
        }
        return dispatcher = dispatcher.concat(urls);
      };
      maybe_add_transport('websocket', [['GET', t('/websocket'), ['websocket']]]);
      webjs_handler = new webjs.WebJS(app, dispatcher);
      install_handler = function(ee, event, handler) {
        var new_handler, old_listeners;
        old_listeners = ee.listeners(event);
        ee.removeAllListeners(event);
        new_handler = function(a, b, c) {
          var listener, _i, _len;
          if (handler(a, b, c) !== true) {
            for (_i = 0, _len = old_listeners.length; _i < _len; _i++) {
              listener = old_listeners[_i];
              listener.call(this, a, b, c);
            }
          }
          return false;
        };
        return ee.addListener(event, new_handler);
      };
      handler = __bind(function(req, res, extra) {
        req.sockjs_server = this;
        return webjs_handler.handler(req, res, extra);
      }, this);
      install_handler(http_server, 'request', handler);
      install_handler(http_server, 'upgrade', handler);
      return true;
    };
    return Server;
  })();
  exports.Server = Server;
}).call(this);
